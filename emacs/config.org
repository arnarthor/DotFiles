# Turn off default internal styles
#+OPTIONS: html-style:nil html5-fancy:t

# Exporting to HTML5
#+HTML_DOCTYPE: html5
#+HTML_HEAD: <meta http-equiv="X-UA-Compatible" content="IE=edge">
#+HTML_HEAD: <meta name="viewport" content="width=device-width, initial-scale=1">

# Add notes.css here
#+HTML_HEAD: <link href="https://arnarthor.github.io/theme/org.css" rel="stylesheet" type="text/css" />
#+TITLE: Emacs Config
#+AUTHOR: Arnar Þór Sveinsson
#+TOC: true
#+OPTIONS: num:nil
#+DATE: [2020-02-16 Sun]

* Introduction
My editor journey has been a long one. I started in Sublime text but got to know Vim on my second year in University. From there I could never go back to an editor without proper Vim bindings.

At my first job I was writing a ton of Javascript and we used eslint among other tools. Unfortuanetly the eslint plugin for Vim was super slow at the time so I had to stop using it.
I went from there to Atom which I used until VSCode came around. VSCode proved to be to slow for me which lead my to try Spacemacs. I used Spacemacs for two years but at my latest job we have a monorepo which really slows it down.

Which has me ending up in a place that a faithful Vim user never expects to be, writing my own literate Emacs config in Org Mode.

* Package management
** [[https://github.com/raxod502/straight.el][straight.el]]

Start off by setting up straight.el for reproducible builds between machines.
#+BEGIN_SRC emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (setq straight-use-package-by-default 1)
#+END_SRC

* Configuration
** Emacs backups
I like the backup files, but I don't like them in my source folder. Therefor I put them into my .emacs.d folder instead and turn off all auto-save functionality.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("" . "~/.emacs.d/backup")))
  (setq auto-save-default nil)
#+END_SRC
** Line numbers
Set line numbers in all buffers
#+BEGIN_SRC emacs-lisp
  (global-linum-mode 1)
#+END_SRC

** Smooth scrolling
Scrolling in evil mode will scroll a full window length when going over the first/last line of a buffer. These settings make Emacs scroll behavior similar to what I'm used to from editors like Vim and VSCode.
#+BEGIN_SRC emacs-lisp
  (setq scroll-step 1)
  (setq scroll-conservatively 10000)
  (setq scroll-preserve-screen-position 1)
#+END_SRC

** Auto close parens
Emacs has a built in mode for which I enable
#+BEGIN_SRC emacs-lisp
  (electric-pair-mode 1)
#+END_SRC

** Shorten confirmation prompts
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Strip trailing whitespaces on save
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Show matching parens
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode  1)
#+END_SRC

* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode 1))
  (use-package counsel-projectile
    :config
    (counsel-projectile-mode 1))

  (setq projectile-completion-system 'ivy)
#+END_SRC

* Evil mode
** Install evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :config
    (evil-mode 1))
  (use-package evil-leader
    :config
    (global-evil-leader-mode))
#+END_SRC
** Evil surround
To easily surround selection with parens, curlies, quotes, etc.
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))
#+END_SRC
** Evil commentary
Simplifies commenting out large regions of code quickly no matter the language
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :config
    (evil-commentary-mode t))
#+END_SRC
* Utilities
#+BEGIN_SRC emacs-lisp
  (use-package restart-emacs)
#+END_SRC
* Org mode
** Pretty bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
* Keybindings
#+BEGIN_SRC emacs-lisp
 ; (use-package general
 ;   :init
 ;   (general-evil-setup)
 ;   :config
 ;   (setq general-default-keymaps 'evil-normal-state-map))
 ;   (general-create-definer global-leader :states '(normal visual) :prefix "<SPC>")
 ;   (general-create-definer local-leader :states '(normal visual) :prefix ","))
#+END_SRC
#+BEGIN_SRC emacs-lisp
 ; (global-leader
 ;   "SPC" '(counsel-M-x :wk "Show all commands")
 ;   "TAB" '(alternate-buffer :wk "Alternate buffer")
 ;   "1" '(winum-select-window-1 :wk "Window 1")
 ;   "2" '(winum-select-window-2 :wk "Window 2")
 ;   "3" '(winum-select-window-3 :wk "Window 3")
 ;   "4" '(winum-select-window-4 :wk "Window 4")
 ;   "5" '(winum-select-window-5 :wk "Window 5")
 ;   "6" '(winum-select-window-6 :wk "Window 6")
 ;   "7" '(winum-select-window-7 :wk "Window 7")
 ;   "8" '(winum-select-window-8 :wk "Window 8")
 ;   "9" '(winum-select-window-9 :wk "Window 9")
 ;   ;; Files
 ;   "f" '(:ignore t :wk "Files")
 ;   "fs" '(save-buffer :wk "Save")
 ;   "fS" '(save-some-buffers :wk "Save all buffers")
 ;   "ff" '(find-file :wk "Find file")
 ;   "ft" '(neotree-toggle :wk "Toggle file tree")
 ;   ;; Buffers
 ;   "b" '(:ignore t :wk "Buffers")
 ;   "bd" '(evil-delete-buffer :wk "Delete buffer")
 ;   "bb" '(ivy-switch-buffer :wk "Switch buffer")
 ;   "qq" '(evil-quit-all :wk "Quit")
 ;   "qr" '(restart-emacs :wk "Restart Emacs")
 ;   ;; Magit
 ;   "g" '(:ignore t :wk "Git")
 ;   "gs" '(magit :wk "Git status")
 ;   ;; Misc
 ;   "cl" '(evil-commentary-line :wk "Comment line")
 ;   "au" '(undo-tree-visualize :wk "Undo tree")
 ;   "fed" '((lambda () (interactive) (find-file "~/code/arnarthor/arnarthor.github.io/emacs/config.org")) :wk "Open emacs config")
 ;   "fer" '((lambda () (interactive) (load-file "~/code/arnarthor/arnarthor.github.io/emacs/init.el")) :wk "Reload config")
 ;   ;; Projectile
 ;   "p" '(:keymap projectile-command-map :wk "Projectile")
 ;   ;; Search
 ;   "s" '(:ignore t :wk "Search")
 ;   "sa" '(:ignore t :wk "Search projectile")
 ;   "sap" '(counsel-ag :wk "Search in project")
 ;   "sf" '(swiper :wk "Swiper")
 ;   "se" '(evil-iedit-state/iedit-mode :wk "Edit buffer")
 ;   "sc" '(iedit-quit :wk "Clear search buffer")
 ;   ;; Windows
 ;   "w" '(:ignore t :wk "Windows")
 ;   "wd" '(delete-window :wk "Delete current window")
 ;   "wv" '(split-window-right :wk "Split window right")
 ;   "wh" '(split-window-below :wk "Split window below")
 ;   "wS" '(window-swap-states :wk "Swap windows"))
#+END_SRC
* Config dump
#+BEGIN_SRC emacs-lisp
  ;; Splash Screen
  (setq inhibit-startup-screen t)
  (setq initial-scratch-message ";; Happy Hacking")

  (add-hook 'after-change-major-mode-hook
    (lambda ()
      (modify-syntax-entry ?_ "w")))

  ;; PATH
  (let ((path (shell-command-to-string ". ~/.zshrc; echo -n $PATH")))
    (setenv "PATH" path)
    (setq exec-path
	  (append
	   (split-string-and-unquote path ":")
	   exec-path)))

  ;; Minimal UI
  (scroll-bar-mode -1)
  (tool-bar-mode   -1)
  (tooltip-mode    -1)
  (menu-bar-mode   -1)

  ;; Fancy titlebar for MacOS
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil)
  (setq frame-title-format nil)

  ;; Vim mode

  ;; Themes
  (use-package darkokai-theme
    :config (load-theme 'darkokai t))

  ;; Ivy
  (use-package ivy
    :config
    (ivy-mode 1))

  (use-package wgrep)

  ;; Company
  (use-package company
    :config
    (progn
      (add-hook 'after-init-hook 'global-company-mode)))

  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0)

  (define-key company-active-map (kbd "TAB") 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "<tab>") 'company-complete-common-or-cycle)
  (define-key company-active-map (kbd "S-TAB") 'company-select-previous)
  (define-key company-active-map (kbd "<backtab>") 'company-select-previous)
  (define-key company-mode-map [remap indent-for-tab-command] 'company-indent-for-tab-command)

  ;; Which key
  (use-package which-key
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    :config
    (which-key-mode))

  ;; vterm
  (use-package vterm)

  ;; magit
  (use-package magit)
  (use-package evil-magit)

  ;; Neo tree
  (use-package neotree)
  (setq neo-smart-open t)
  (setq projectile-switch-project-action 'neotree-projectile-action)
  (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
  (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
  (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
  (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
  (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
  (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
  (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
  (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)

  ;; Reason setup
  (defun shell-cmd (cmd)
    "Returns the stdout output of a shell command or nil if the command returned
     an error"
    (car (ignore-errors (apply 'process-lines (split-string cmd)))))

  (defun reason-cmd-where (cmd)
    (let ((where (shell-cmd cmd)))
      (if (not (string-equal "unknown flag ----where" where))
	where)))

  (let* ((refmt-bin (or (reason-cmd-where "refmt ----where")
			(shell-cmd "which refmt")
			(shell-cmd "which bsrefmt")))
	 (merlin-bin (or (reason-cmd-where "ocamlmerlin ----where")
			 (shell-cmd "which ocamlmerlin")))
	 (merlin-base-dir (when merlin-bin
			    (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
    ;; Add merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
  (when merlin-bin
    (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
    (setq merlin-command merlin-bin))

  (when refmt-bin
    (setq refmt-command refmt-bin)))

  (use-package merlin)

  (use-package reason-mode
    :config
    (add-hook 'reason-mode-hook (lambda ()
				(add-hook 'before-save-hook 'refmt-before-save)
				(merlin-mode))))

  (use-package utop)

  (setq utop-command "opam config exec -- rtop -emacs")
  (add-hook 'reason-mode-hook #'utop-minor-mode)
  (setq merlin-completion-with-doc t)

  ;; undo tree
  (use-package undo-tree
    :config
    (global-undo-tree-mode 1))

  ;; dockerfile
  (use-package dockerfile-mode
    :config
    (add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode)))

  (use-package docker)

  ;; Rust and cargo
  (use-package rust-mode)

  (use-package lsp-mode
    :init (setq lsp-keymap-prefix "C-l")
    :hook (
	   (rust-mode . lsp)
	   (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp)

  (use-package cargo
    :config
    (add-hook 'rust-mode-hook 'cargo-minor-mode))

  ;; yaml
  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode)))

  ;; window management

  ;; Taken from spacemacs code
  (defun alternate-buffer (&optional window)
    "Switch back and forth between current and last buffer in the
  current window."
    (interactive)
    (let ((current-buffer (window-buffer window))
	  (buffer-predicate
	   (frame-parameter (window-frame window) 'buffer-predicate)))
      ;; switch to first buffer previously shown in this window that matches
      ;; frame-parameter `buffer-predicate'
      (switch-to-buffer
       (or (cl-find-if (lambda (buffer)
			 (and (not (eq buffer current-buffer))
			      (or (null buffer-predicate)
				  (funcall buffer-predicate buffer))))
		       (mapcar #'car (window-prev-buffers window)))
	   ;; `other-buffer' honors `buffer-predicate' so no need to filter
	   (other-buffer current-buffer t)))))

  (use-package winum
    :config
    (winum-mode 1))

  ;; iedit
  (use-package iedit)

  (use-package evil-iedit-state)

  ;; Org mode
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (setq org-log-done t)
  (use-package evil-org
    :after org
    :config
    (add-hook 'org-mode-hook 'evil-org-mode)
    (add-hook 'evil-org-mode-hook
	      (lambda ()
		(evil-org-set-key-theme)))
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package htmlize)

  (setq org-agenda-files (list "~/code/arnarthor/org/work.org"
			       "~/code/arnarthor/org/home.org"))

  ;; Custom keybinding
  (use-package general
    :config (general-define-key
    :states '(normal visual insert emacs)
    :prefix "SPC"
    :non-normal-prefix "M-SPC"
    "SPC" '(counsel-M-x :wk "Show all commands")
    "TAB" '(alternate-buffer :wk "Alternate buffer")
    "1" '(winum-select-window-1 :wk "Window 1")
    "2" '(winum-select-window-2 :wk "Window 2")
    "3" '(winum-select-window-3 :wk "Window 3")
    "4" '(winum-select-window-4 :wk "Window 4")
    "5" '(winum-select-window-5 :wk "Window 5")
    "6" '(winum-select-window-6 :wk "Window 6")
    "7" '(winum-select-window-7 :wk "Window 7")
    "8" '(winum-select-window-8 :wk "Window 8")
    "9" '(winum-select-window-9 :wk "Window 9")
    ;; Files
    "f" '(:ignore t :wk "Files")
    "fs" '(save-buffer :wk "Save")
    "fS" '(save-some-buffers :wk "Save all buffers")
    "ff" '(find-file :wk "Find file")
    "ft" '(neotree-toggle :wk "Toggle file tree")
    ;; Buffers
    "b" '(:ignore t :wk "Buffers")
    "bd" '(evil-delete-buffer :wk "Delete buffer")
    "bb" '(ivy-switch-buffer :wk "Switch buffer")
    "qq" '(evil-quit-all :wk "Quit")
    ;; Magit
    "g" '(:ignore t :wk "Git")
    "gs" '(magit :wk "Git status")
    ;; Misc
    "cl" '(evil-commentary-line :wk "Comment line")
    "au" '(undo-tree-visualize :wk "Undo tree")
    "fed" '((lambda () (interactive) (find-file "~/code/arnarthor/arnarthor.github.io/emacs/config.org")) :wk "Open emacs config")
    "fer" '((lambda () (interactive) (load-file "~/code/arnarthor/arnarthor.github.io/emacs/init.el")) :wk "Reload config")
    ;; Projectile
    "p" '(:keymap projectile-command-map :wk "Projectile")
    ;; Search
    "s" '(:ignore t :wk "Search")
    "sa" '(:ignore t :wk "Search projectile")
    "sap" '(counsel-ag :wk "Search in project")
    "sf" '(swiper :wk "Swiper")
    "se" '(evil-iedit-state/iedit-mode :wk "Edit buffer")
    "sc" '(iedit-quit :wk "Clear search buffer")
    ;; Windows
    "w" '(:ignore t :wk "Windows")
    "wd" '(delete-window :wk "Delete current window")
    "wv" '(split-window-right :wk "Split window right")
    "wh" '(split-window-below :wk "Split window below")
    "wS" '(window-swap-states :wk "Swap windows")
  ))

  ;; Reason keybindings
  (general-define-key
    :states '(normal visual insert emacs)
    :prefix ","
    :major-modes '(reason-mode t)
    :non-normal-prefix "M-,"
    "h" '(:ignore t :wk "Types")
    "ht" '(merlin-type-enclosing :wk "Show type under cursor")
    "g" '(:ignore t :wk "Navigation")
    "gg" '(merlin-locate :wk "Go to definition")
    "gi" '(merlin-switch-to-ml :wk "Switch to ml")
    "gI" '(merlin-switch-to-mli :wk "Switch to mli")
    "e" '(:ignore t :wk "Errors")
    "en" '(merlin-error-next :wk "Next error")
    "eN" '(merlin-error-prev :wk "Previous error")
  )

  ;; ;; Docker keybindings
  ;; (general-define-key
  ;;   :states '(normal visual insert emacs)
  ;;   :prefix ","
  ;;   :major-modes '(dockerfile-mode)
  ;;   :non-normal-prefix "M-,"
  ;;   "c" '(:ignore t :wk "Compile")
  ;;   "cb" '(dockerfile-build-buffer :wk "Build buffer")
  ;;   "cB" '(dockerfile-build-no-cache-buffer :wk "Build buffer without cache")
  ;;   "ls" '(docker-images :wk "List images")
  ;; )

  ;; (general-define-key
  ;;   :states '(normal visual insert emacs)
  ;;   :prefix ","
  ;;   :major-modes '(org-mode evil-org-mode)
  ;;   :non-normal-prefix "M-,"
  ;;   "c" '(:ignore t :wk "Compile")
  ;;   "cb" '(org-html-export-to-html :wk "Export to html")
  ;;   "e" '(:ignore t :wk "Edit")
  ;;   "es" '(org-edit-special :wk "Edit special section")
  ;; )
#+END_SRC
